(function(e,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("@vis-three/tdcm"),require("three")):typeof define=="function"&&define.amd?define(["exports","@vis-three/tdcm","three"],s):(e=typeof globalThis<"u"?globalThis:e||self,s((e["vis-three"]=e["vis-three"]||{},e["vis-three"]["module-curve"]={}),e.tdcm,e.three))})(this,function(e,s,n){"use strict";const d=function(){return Object.assign(s.getBasicConfig(),{arcLengthDivisions:200})},h=function(){return Object.assign(d(),{startX:0,startY:0,vertical:5,clockwise:!1,endX:10,endY:10})},v=function(){return Object.assign(d(),{startX:0,startY:0,endX:10,endY:10})},m={reg:new RegExp(".*"),handler({config:t,target:c,model:r,engine:a,compiler:o}){o.symbolMap.delete(c),r.dispose();const u=r.create();o.symbolMap.set(u,t.vid)}},C=function(){return m};class f extends n.EllipseCurve{constructor(c,r,a,o,u,g){super(0,0,1,1,0,Math.PI*2,!1,0),this.start=new n.Vector2,this.end=new n.Vector2,this.vertical=0,this.center=new n.Vector2,this.tempVector=new n.Vector2,this.start.set(c,r),this.end.set(u,g),this.vertical=a;const l=this.tempVector,V=this.start,p=this.end,b=new n.Vector2((u+c)/2,(g+r)/2),i=this.center.copy(this.end).sub(this.start);i.set(-i.y,i.x).negate().normalize().multiplyScalar(a).add(b),this.aX=i.x,this.aY=i.y,this.xRadius=l.copy(p).sub(i).length(),this.yRadius=this.xRadius,this.aStartAngle=l.copy(V).sub(i).angle(),this.aEndAngle=l.copy(p).sub(i).angle(),this.aClockwise=o}}const y=s.defineModel({type:"ArcCurve",config:h,commands:{set:{$reg:[C()]}},create({config:t}){return new f(t.startX,t.startY,t.vertical,t.clockwise,t.endX,t.endY)},dispose(){}}),w=s.defineModel({type:"LineCurve",config:v,commands:{set:{$reg:[C()]}},create({config:t}){return new n.LineCurve(new n.Vector2(t.startX,t.startY),new n.Vector2(t.endX,t.endY))},dispose(){}}),M=s.defineModule({type:"curve",models:[y,w],lifeOrder:s.SUPPORT_LIFE_CYCLE.ZERO-1});e.ArcCurve=f,e.default=M,e.getArcCurveConfig=h,e.getCurveConfig=d,e.getLineCurveConfig=v,Object.defineProperties(e,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
