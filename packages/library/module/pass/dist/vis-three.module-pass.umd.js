(function(l,n){typeof exports=="object"&&typeof module!="undefined"?n(exports,require("@vis-three/middleware"),require("three"),require("three/examples/jsm/postprocessing/Pass"),require("three/examples/jsm/shaders/LuminosityHighPassShader"),require("three/examples/jsm/postprocessing/SMAAPass"),require("three/examples/jsm/postprocessing/UnrealBloomPass")):typeof define=="function"&&define.amd?define(["exports","@vis-three/middleware","three","three/examples/jsm/postprocessing/Pass","three/examples/jsm/shaders/LuminosityHighPassShader","three/examples/jsm/postprocessing/SMAAPass","three/examples/jsm/postprocessing/UnrealBloomPass"],n):(l=typeof globalThis!="undefined"?globalThis:l||self,n((l["vis-three"]=l["vis-three"]||{},l["vis-three"]["module-pass"]={}),l.middleware,l.three,l.Pass,l.LuminosityHighPassShader,l.SMAAPass,l.UnrealBloomPass))})(this,function(l,n,t,S,C,R,j){"use strict";var L=Object.defineProperty;var k=(l,n,t)=>n in l?L(l,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[n]=t;var s=(l,n,t)=>(k(l,typeof n!="symbol"?n+"":n,t),t);class P extends n.Compiler{constructor(){super();s(this,"composer")}useEngine(e){return super.useEngine(e),e.effectComposer?(this.composer=e.effectComposer,this):(console.warn("engine need install effectComposer plugin that can use pass compiler."),this)}add(e){const o=super.add(e);return o&&this.composer.addPass(o),o}remove(e){if(!this.map.has(e.vid))return console.warn(`PassCompiler can not found this vid pass: ${e.vid}.`),this;const o=this.map.get(e.vid);return this.composer.removePass(o),super.remove(e),this}}const O=function(i,a){n.Rule(i,a)},p=class extends S.Pass{constructor(e=new t.Vector2(256,256),o=1,u=0,c=0,m=new t.Scene,M=new t.PerspectiveCamera,b){super();s(this,"resolution");s(this,"strength");s(this,"radius");s(this,"threshold");s(this,"selectedObjects",[]);s(this,"renderScene");s(this,"renderCamera");s(this,"clearColor",new t.Color(0,0,0));s(this,"renderTargetsHorizontal",[]);s(this,"renderTargetsVertical",[]);s(this,"nMips",5);s(this,"selectRenderTarget");s(this,"renderTargetBright");s(this,"highPassUniforms");s(this,"materialHighPassFilter");s(this,"separableBlurMaterials",[]);s(this,"compositeMaterial");s(this,"bloomTintColors");s(this,"mixMaterial");s(this,"enabled",!0);s(this,"needsSwap",!1);s(this,"_oldClearColor",new t.Color);s(this,"oldClearAlpha",1);s(this,"basic",new t.MeshBasicMaterial);s(this,"fsQuad",new S.FullScreenQuad);s(this,"materialCache",new Map);s(this,"sceneBackgroundCache",null);s(this,"overrideBackground",new t.Color("black"));s(this,"overrideMeshMaterial",new t.MeshBasicMaterial({color:"black"}));s(this,"overrideLineMaterial",new t.LineBasicMaterial({color:"black"}));s(this,"overridePointsMaterial",new t.PointsMaterial({color:"black"}));s(this,"overrideSpriteMaterial",new t.SpriteMaterial({color:"black"}));this.resolution=e,this.strength=o,this.radius=u,this.threshold=c,this.renderScene=m,this.renderCamera=M,this.selectedObjects=b;let d=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2);this.selectRenderTarget=new t.WebGLRenderTarget(d,h),this.selectRenderTarget.texture.name="UnrealBloomPass.selected",this.selectRenderTarget.texture.generateMipmaps=!1,this.renderTargetBright=new t.WebGLRenderTarget(d,h),this.renderTargetBright.texture.name="UnrealBloomPass.bright",this.renderTargetBright.texture.generateMipmaps=!1;for(let f=0;f<this.nMips;f++){const x=new t.WebGLRenderTarget(d,h);x.texture.name="UnrealBloomPass.h"+f,x.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(x);const T=new t.WebGLRenderTarget(d,h);T.texture.name="UnrealBloomPass.v"+f,T.texture.generateMipmaps=!1,this.renderTargetsVertical.push(T),d=Math.round(d/2),h=Math.round(h/2)}C.LuminosityHighPassShader===void 0&&console.error("THREE.UnrealBloomPass relies on LuminosityHighPassShader");const r=C.LuminosityHighPassShader;this.highPassUniforms=t.UniformsUtils.clone(r.uniforms),this.highPassUniforms.luminosityThreshold.value=c,this.highPassUniforms.smoothWidth.value=.01,this.materialHighPassFilter=new t.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,defines:{}});const F=[3,5,7,9,11];d=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2);for(let f=0;f<this.nMips;f++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(F[f])),this.separableBlurMaterials[f].uniforms.texSize.value=new t.Vector2(d,h),d=Math.round(d/2),h=Math.round(h/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=o,this.compositeMaterial.uniforms.bloomRadius.value=.1,this.compositeMaterial.needsUpdate=!0;const H=[1,.8,.6,.4,.2];this.compositeMaterial.uniforms.bloomFactors.value=H,this.bloomTintColors=[new t.Vector3(1,1,1),new t.Vector3(1,1,1),new t.Vector3(1,1,1),new t.Vector3(1,1,1),new t.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,this.mixMaterial=this.getMixMaterial()}dispose(){for(let e=0;e<this.renderTargetsHorizontal.length;e++)this.renderTargetsHorizontal[e].dispose();for(let e=0;e<this.renderTargetsVertical.length;e++)this.renderTargetsVertical[e].dispose();this.renderTargetBright.dispose()}setSize(e,o){let u=Math.round(e/2),c=Math.round(o/2);this.selectRenderTarget.setSize(u,c),this.renderTargetBright.setSize(u,c);for(let m=0;m<this.nMips;m++)this.renderTargetsHorizontal[m].setSize(u,c),this.renderTargetsVertical[m].setSize(u,c),this.separableBlurMaterials[m].uniforms.texSize.value=new t.Vector2(u,c),u=Math.round(u/2),c=Math.round(c/2)}render(e,o,u,c,m){if(!this.selectedObjects.length){this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=u.texture,e.setRenderTarget(null),e.clear(),this.fsQuad.render(e));return}e.getClearColor(this._oldClearColor),this.oldClearAlpha=e.getClearAlpha();const M=e.autoClear;e.autoClear=!1,e.setClearColor(this.clearColor,0),m&&e.state.buffers.stencil.setTest(!1);const b=new Map;for(const r of this.selectedObjects)b.set(r,!0);const d=this.materialCache;this.renderScene.background&&(this.sceneBackgroundCache=this.renderScene.background,this.renderScene.background=this.overrideBackground),this.renderScene.traverse(r=>{!b.has(r)&&!r.isLight&&r.visible&&(d.set(r,r.material),r instanceof t.Mesh?r.material=this.overrideMeshMaterial:r instanceof t.Line?r.material=this.overrideLineMaterial:r instanceof t.Points?r.material=this.overridePointsMaterial:r instanceof t.Sprite&&(r.material=this.overrideSpriteMaterial))}),e.setRenderTarget(this.selectRenderTarget),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderToScreen&&(this.fsQuad.material=this.basic,this.basic.map=this.selectRenderTarget.texture,e.setRenderTarget(null),e.clear(),this.fsQuad.render(e)),this.highPassUniforms.tDiffuse.value=this.selectRenderTarget.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.fsQuad.material=this.materialHighPassFilter,e.setRenderTarget(this.renderTargetBright),e.clear(),this.fsQuad.render(e);let h=this.renderTargetBright;for(let r=0;r<this.nMips;r++)this.fsQuad.material=this.separableBlurMaterials[r],this.separableBlurMaterials[r].uniforms.colorTexture.value=h.texture,this.separableBlurMaterials[r].uniforms.direction.value=p.BlurDirectionX,e.setRenderTarget(this.renderTargetsHorizontal[r]),e.clear(),this.fsQuad.render(e),this.separableBlurMaterials[r].uniforms.colorTexture.value=this.renderTargetsHorizontal[r].texture,this.separableBlurMaterials[r].uniforms.direction.value=p.BlurDirectionY,e.setRenderTarget(this.renderTargetsVertical[r]),e.clear(),this.fsQuad.render(e),h=this.renderTargetsVertical[r];this.fsQuad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,e.setRenderTarget(this.renderTargetsHorizontal[0]),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.mixMaterial,this.mixMaterial.uniforms.bloom.value=this.renderTargetsHorizontal[0].texture,this.mixMaterial.uniforms.origin.value=u.texture,m&&e.state.buffers.stencil.setTest(!0),this.renderToScreen?(e.setRenderTarget(null),this.fsQuad.render(e)):(e.setRenderTarget(u),this.fsQuad.render(e)),e.setClearColor(this._oldClearColor,this.oldClearAlpha),e.autoClear=M;for(const r of d.entries())r[0].material=r[1];d.clear(),this.sceneBackgroundCache&&(this.renderScene.background=this.sceneBackgroundCache,this.sceneBackgroundCache=null)}getMixMaterial(){return new t.ShaderMaterial({blending:t.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0,uniforms:{bloom:{value:null},origin:{value:null}},vertexShader:`
    
        varying vec2 vUv;
    
        void main() {
    
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    
        }`,fragmentShader:`
        uniform sampler2D bloom;
        uniform sampler2D origin;
    
        varying vec2 vUv;
    
        void main() {
          vec3 bloomColor = texture2D(bloom, vUv).rgb;
          vec3 originColor = texture2D(origin, vUv).rgb;
          gl_FragColor = vec4(originColor + bloomColor, 1.0);
        }`})}getSeperableBlurMaterial(e){return new t.ShaderMaterial({defines:{KERNEL_RADIUS:e,SIGMA:e},uniforms:{colorTexture:{value:null},texSize:{value:new t.Vector2(.5,.5)},direction:{value:new t.Vector2(.5,.5)}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`#include <common>
				varying vec2 vUv;
				uniform sampler2D colorTexture;
				uniform vec2 texSize;
				uniform vec2 direction;

				float gaussianPdf(in float x, in float sigma) {
					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
				}
				void main() {
					vec2 invSize = 1.0 / texSize;
					float fSigma = float(SIGMA);
					float weightSum = gaussianPdf(0.0, fSigma);
					vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;
					for( int i = 1; i < KERNEL_RADIUS; i ++ ) {
						float x = float(i);
						float w = gaussianPdf(x, fSigma);
						vec2 uvOffset = direction * invSize * x;
						vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;
						vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;
						diffuseSum += (sample1 + sample2) * w;
						weightSum += 2.0 * w;
					}
					gl_FragColor = vec4(diffuseSum/weightSum, 1.0);
				}`})}getCompositeMaterial(e){return new t.ShaderMaterial({defines:{NUM_MIPS:e},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;
				uniform sampler2D blurTexture1;
				uniform sampler2D blurTexture2;
				uniform sampler2D blurTexture3;
				uniform sampler2D blurTexture4;
				uniform sampler2D blurTexture5;
				uniform float bloomStrength;
				uniform float bloomRadius;
				uniform float bloomFactors[NUM_MIPS];
				uniform vec3 bloomTintColors[NUM_MIPS];

				float lerpBloomFactor(const in float factor) {
					float mirrorFactor = 1.2 - factor;
					return mix(factor, mirrorFactor, bloomRadius);
				}

				void main() {
					gl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +
						lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +
						lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +
						lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +
						lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );
				}`})}};let g=p;s(g,"BlurDirectionX",new t.Vector2(1,0)),s(g,"BlurDirectionY",new t.Vector2(0,1));const v=function(){return Object.assign(n.getSymbolConfig(),{vid:"",name:"",type:"Pass",index:0})},w=function(){return Object.assign(v(),{})},B=function(){return Object.assign(v(),{strength:1.5,threshold:0,radius:0})},U=function(){return Object.assign(v(),{strength:1,threshold:0,radius:0,renderScene:"",renderCamera:"",selectedObjects:[]})},D=function(){return Object.assign(v(),{camera:"",scene:"",kernelRadius:8,kernelSize:32,noiseTexture:"",output:0,minDistance:.005,maxDistance:.1})};var A=n.defineProcessor({type:"SelectiveBloomPass",config:U,commands:{add:{selectedObjects({target:i,engine:a,value:e}){const o=a.getObject3D(e);o?i.selectedObjects.push(o):console.warn(`selectiveBloomPassProcessor: can not found vid in engine: ${e}`)}},set:{renderScene({target:i,engine:a,value:e}){const o=a.getObject3D(e);o instanceof t.Scene&&(i.renderScene=o)},renderCamera({target:i,engine:a,value:e}){const o=a.getObject3D(e);o instanceof t.Camera&&(i.renderCamera=o)},selectedObjects({target:i,config:a,engine:e}){const o=a.selectedObjects.map(u=>{const c=e.getObject3D(u);if(c)return c;console.warn(`selectiveBloomPassProcessor: can not found vid in engine: ${u}`)}).filter(u=>u);i.selectedObjects=o}},delete:{selectedObjects({target:i,engine:a,value:e}){const o=a.getObject3D(e);o?i.selectedObjects.includes(o)&&i.selectedObjects.splice(i.selectedObjects.indexOf(o),1):console.warn(`selectiveBloomPassProcessor: can not found vid in engine: ${e}`)}}},create(i,a){const e=[];for(const c of i.selectedObjects){const m=a.getObject3D(c);m&&e.push(m)}const o=window.devicePixelRatio;return new g(new t.Vector2(a.dom?a.dom.offsetWidth*o:window.innerWidth*o,a.dom?a.dom.offsetHeight*o:window.innerWidth*o),i.strength,i.radius,i.threshold,i.renderScene&&a.getObjectfromModule(n.MODULETYPE.SCENE,i.renderScene)||void 0,i.renderCamera&&a.getObjectfromModule(n.MODULETYPE.CAMERA,i.renderCamera)||void 0,e)},dispose(i){i.dispose()}}),V=n.defineProcessor({type:"SMAAPass",config:w,create(i,a){const e=window.devicePixelRatio;return new R.SMAAPass(a.dom?a.dom.offsetWidth*e:window.innerWidth*e,a.dom?a.dom.offsetHeight*e:window.innerWidth*e)},dispose(i){}}),y=n.defineProcessor({type:"UnrealBloomPass",config:B,create(i,a){const e=window.devicePixelRatio;return new j.UnrealBloomPass(new t.Vector2(a.dom?a.dom.offsetWidth*e:window.innerWidth*e,a.dom?a.dom.offsetHeight*e:window.innerWidth*e),i.strength,i.radius,i.threshold)},dispose(i){i.dispose()}}),z={type:"pass",compiler:P,rule:O,processors:[y,V,A]};l.PassCompiler=P,l.default=z,l.getPassConfig=v,l.getSMAAPassConfig=w,l.getSSAOPassConfig=D,l.getSelectiveBloomPassConfig=U,l.getUnrealBloomPassConfig=B,Object.defineProperties(l,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
