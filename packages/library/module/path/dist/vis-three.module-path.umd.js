(function(s,i){typeof exports=="object"&&typeof module!="undefined"?module.exports=i(require("@vis-three/middleware"),require("uuid"),require("three")):typeof define=="function"&&define.amd?define(["@vis-three/middleware","uuid","three"],i):(s=typeof globalThis!="undefined"?globalThis:s||self,s["vis-three"]=s["vis-three"]||{},s["vis-three"]["module-path"]=i(s.middleware,s.uuid,s.three))})(this,function(s,i,u){"use strict";class l extends s.Compiler{constructor(){super()}compile(r,n){return super.compile(r,n),this}}const C=function(e,r,n=i.validate){s.Rule(e,r,n)},P=function(){return Object.assign(s.getSymbolConfig(),{curves:[],autoClose:!1})},p={line:(e,r,n,t)=>new u.LineCurve(new u.Vector2(e,r),new u.Vector2(n,t)),bezier:(e,r,n,t,c,o,a,x)=>new u.CubicBezierCurve(new u.Vector2(e,r),new u.Vector2(n,t),new u.Vector2(c,o),new u.Vector2(a,x)),quadratic:(e,r,n,t,c,o)=>new u.QuadraticBezierCurve(new u.Vector2(e,r),new u.Vector2(n,t),new u.Vector2(c,o))},d=function(e,r){return r==="start"?e.getPoint(0):e.getPoint(1)},f={line:{start:[0,1],end:[2,3]},bezier:{start:[0,1],end:[6,7]},quadratic:{start:[0,1],end:[4,5]}},v=function(e){return p[e.curve]?p[e.curve](...e.params):(console.warn(`path processor can not support this curve: ${e.curve}`),null)},h=function(e,r,n){if(!f[e.curve]){console.warn(`can not support this curve: ${e.curve}`);return}f[e.curve][n].forEach((t,c)=>{r[c]!==e.params[t]&&(e.params[t]=r[c])})};var m=s.defineProcessor({type:"Path",config:P,commands:{add:{curves({target:e,config:r,value:n}){const t=v(n);t&&e.curves.push(t)}},set:{curves({target:e,config:r,path:n}){const t=Number(n[1]);if(!Number.isInteger(t)){console.warn("path processor: set curves path error:",n);return}const c=v(r.curves[t]);e.curves[t]=c;const o=d(c,"start"),a=d(c,"end");t-1>=0&&h(r.curves[t-1],[o.x,o.y],"end"),t+1<=e.curves.length-1&&h(r.curves[t+1],[a.x,a.y],"start")}},delete:{curves({target:e,value:r}){e.curves.length-1<r||e.curves.splice(r,e.curves.length)}}},create(e,r){const n=new u.Path;if(e.curves.length)for(const t of e.curves){const c=v(t);c&&n.curves.push(c)}return n.autoClose=e.autoClose,n},dispose(e){e.curves=[]}}),w={type:"path",compiler:l,rule:C,processors:[m],lifeOrder:s.SUPPORT_LIFE_CYCLE.ZERO};return w});
