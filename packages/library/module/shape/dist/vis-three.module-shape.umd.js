(function(o,p){typeof exports=="object"&&typeof module!="undefined"?module.exports=p(require("@vis-three/middleware"),require("uuid"),require("three")):typeof define=="function"&&define.amd?define(["@vis-three/middleware","uuid","three"],p):(o=typeof globalThis!="undefined"?globalThis:o||self,o["vis-three"]=o["vis-three"]||{},o["vis-three"]["module-shape"]=p(o.middleware,o.uuid,o.three))})(this,function(o,p,l){"use strict";class i extends o.Compiler{constructor(){super()}}const f=function(e,r,s=p.validate){o.Rule(e,r,s)},d=function(){return Object.assign(o.getSymbolConfig(),{shape:"",holes:[]})},h=new WeakMap,u=function(e,r,s){h.has(e)||h.set(e,new Set),h.get(e).add({target:r,eventFun:s}),o.Bus.compilerEvent.on(r,o.COMPILER_EVENT.UPDATE,s)},a=function(e,r){if(!h.has(e)){console.warn("shape processor found an error can not found cache shape:",e);return}const s=h.get(e);for(const n of s.values())if(n.target===r){o.Bus.compilerEvent.off(r,o.COMPILER_EVENT.UPDATE,n.eventFun),s.delete(n);break}};var E=o.defineProcessor({type:"Shape",config:d,commands:{add:{holes({target:e,engine:r,config:s,value:n}){const t=r.compilerManager.getObjectfromModule(o.MODULETYPE.PATH,n);if(!t){console.warn(`shape processor can not found path: ${n}`);return}e.holes.push(t);const c=s.holes.length-1;u(e,t,()=>{s.holes[c]=s.holes[c]})}},set:{shape({target:e,engine:r,value:s}){const n=r.compilerManager.getObjectfromModule(o.MODULETYPE.PATH,s);n?e.curves=n.curves:console.warn(`shape processor can not found path: ${s}`)},holes({target:e,engine:r,path:s,value:n}){const t=Number(s[1]);if(!Number.isInteger(t)){console.warn("shape processor: delete holes error:",s);return}const c=r.compilerManager.getObjectfromModule(o.MODULETYPE.PATH,n);if(!c){console.warn(`shape processor can not found path: ${n}`);return}e.holes[t]=c}},delete:{holes({target:e,path:r}){const s=Number(r[1]);if(!Number.isInteger(s)){console.warn("shape processor: delete holes error:",r);return}a(e,e.holes[s]),e.holes.splice(s,1)}}},create(e,r){const s=new l.Shape;if(e.shape){const n=r.compilerManager.getObjectfromModule(o.MODULETYPE.PATH,e.shape);n?(s.curves=n.curves,u(s,n,()=>{e.shape=e.shape})):console.warn(`shape processor can not found path: ${e.shape}`)}if(e.holes.length)for(let n=0;n<e.holes.length;n+=1){const t=e.holes[n],c=r.compilerManager.getObjectfromModule(o.MODULETYPE.PATH,t);c?(s.holes.push(c),u(s,c,()=>{e.holes[n]=e.holes[n]})):console.warn(`shape processor can not found path: ${t}`)}return s},dispose(e){e.curves=[],e.holes=[];const r=h.get(e);if(!e){console.warn("shape processor found an error can not found cache shape:",e);return}r.forEach(s=>{a(e,s.target)}),h.delete(e)}}),M={type:"shape",compiler:i,rule:f,processors:[E],lifeOrder:o.SUPPORT_LIFE_CYCLE.ONE};return M});
