(function(i,s){typeof exports=="object"&&typeof module!="undefined"?s(exports,require("@vis-three/utils"),require("@vis-three/plugin-pointer-manager"),require("@vis-three/core"),require("three")):typeof define=="function"&&define.amd?define(["exports","@vis-three/utils","@vis-three/plugin-pointer-manager","@vis-three/core","three"],s):(i=typeof globalThis!="undefined"?globalThis:i||self,s((i["vis-three"]=i["vis-three"]||{},i["vis-three"]["plugin-path-drawing"]={}),i.utils,i.pluginPointerManager,i.core,i.three))})(this,function(i,s,h,c,n){"use strict";var v=Object.defineProperty;var P=(i,s,h)=>s in i?v(i,s,{enumerable:!0,configurable:!0,writable:!0,value:h}):i[s]=h;var a=(i,s,h)=>(P(i,typeof s!="symbol"?s+"":s,h),h);const m="@vis-three/plugin-path-drawing";var d=(o=>(o.BEGIN="begin",o.END="end",o.WRITE="write",o.MOVE="move",o))(d||{});class p extends c.EventDispatcher{constructor(e){super();a(this,"camera",new n.OrthographicCamera(-window.innerWidth,window.innerWidth,window.innerHeight,-window.innerHeight,0,1e4));a(this,"plane",new n.Plane(new n.Vector3(0,0,1),0));a(this,"boardOffset",20);a(this,"drawingBoard",new n.Mesh(new n.PlaneBufferGeometry(150,150),new n.MeshBasicMaterial({transparent:!0,opacity:.2,color:"rgb(64, 255, 242)"})));a(this,"relativeMatrixInvert",new n.Matrix4);a(this,"engine");a(this,"cachePoint",new n.Vector3);a(this,"cacheRelativePoint",new n.Vector3);a(this,"_tempVector",new n.Vector3);a(this,"_tempVector2",new n.Vector3);a(this,"_tempQuaternion",new n.Quaternion);a(this,"begun",!1);a(this,"autoPlane",!1);a(this,"setScene",e=>{this.drawingBoard.parent&&e.scene.add(this.drawingBoard)});a(this,"cacheBeginWriteFun",e=>{const t=this.engine.pointerManager;this.cacheWriteFun(e),t.addEventListener("mousedown",this.cacheWriteFun),t.addEventListener("pointermove",this.cacheMoveFun),t.removeEventListener("mousedown",this.cacheBeginWriteFun),this.begun=!0});a(this,"cacheWriteFun",e=>{this.autoPlane&&this.autoCalcPlane();const t=this.engine.pointerManager.intersectPlane(this.camera,this.plane,this.cachePoint);if(!t){console.warn("path sketcher can not intersect point in this plane and this camera");return}this.dispatchEvent({type:"write",point:t,relativePoint:this.cacheRelativePoint.copy(t).applyMatrix4(this.relativeMatrixInvert)})});a(this,"cacheMoveFun",e=>{this.autoPlane&&this.autoCalcPlane();const t=this.engine.pointerManager.intersectPlane(this.camera,this.plane,this.cachePoint);if(!t){console.warn("path sketcher can not intersect point in this plane and this camera");return}this.dispatchEvent({type:"move",point:t,relativePoint:this.cacheRelativePoint.copy(t).applyMatrix4(this.relativeMatrixInvert)})});this.engine=e,this.drawingBoard.raycast=()=>{},this.drawingBoard.matrixAutoUpdate=!1,this.setDrawingBoardMatrix(),e.addEventListener(c.ENGINE_EVENT.SETSCENE,this.setScene)}autoCalcPlane(){const e=this.plane,t=this.camera,r=this._tempVector.set(0,0,0),w=this._tempQuaternion;e.normal.set(0,0,1).applyQuaternion(t.getWorldQuaternion(w)).normalize(),r.set(0,0,0).project(t),r.x>1||r.x<-1||r.y>1||r.y<-1||r.z>1||r.z<-1?e.constant=t.getWorldPosition(r).length()+50:e.constant=0}setCamera(e){return this.camera=e,this}setAutoPlane(e){return this.autoPlane=e,this}setDraingBoardSize(e,t){const r=new n.PlaneBufferGeometry(e,t);this.drawingBoard.geometry.copy(r),r.dispose()}offsetCamera(e){const t=e.length();return e.normalize().applyQuaternion(new n.Quaternion().setFromUnitVectors(new n.Vector3(0,1,0),this.plane.normal)),this.camera.position.copy(this.plane.normal).multiplyScalar(this.plane.constant).add(e.multiplyScalar(t)),this.camera instanceof n.OrthographicCamera&&(this.camera.zoom=(this.camera.top-this.camera.bottom)/(this.drawingBoard.geometry.parameters.height+this.boardOffset)),this.camera.updateProjectionMatrix(),this.drawingBoard.position.add(e),this.drawingBoard.updateMatrix(),this.drawingBoard.updateMatrixWorld(!0),this}setRelativeObject(e){return this.relativeMatrixInvert.copy(e.matrixWorld).invert(),this}setDrawPlane(e,t=0){return this.plane.set(e,t),this.setDrawingBoardMatrix(),this}setDrawPlaneByFace(e){return this.plane.setFromCoplanarPoints(e.a,e.b,e.c),this.setDrawingBoardMatrix(),this}setDrawingBoardMatrix(){const e=this.drawingBoard;e.position.copy(this.plane.normal).multiplyScalar(this.plane.constant),e.applyQuaternion(new n.Quaternion().setFromUnitVectors(new n.Vector3(0,0,1),this.plane.normal)),e.updateMatrix(),e.updateMatrixWorld(!0)}dispose(){this.drawingBoard.removeFromParent(),this.drawingBoard.geometry.dispose(),this.drawingBoard.material.dispose(),this.engine.removeEventListener(c.ENGINE_EVENT.SETSCENE,this.setScene)}showDrawingBoard(e){return e?this.engine.scene.add(this.drawingBoard):this.engine.scene.remove(this.drawingBoard),this}setSketcherByPlane(e=new n.Vector3(0,0,1),t=0,r=new n.Vector3(0,50,0)){return this.setDrawPlane(e,t).offsetCamera(r)}setSketcherByFace(e,t=new n.Vector3(0,50,0)){return this.setDrawPlaneByFace(e).offsetCamera(t)}setSketcherByFaceAndObject(e,t){const r=new n.Vector3().setFromMatrixPosition(t.matrixWorld);return this.setRelativeObject(t),this.setSketcherByFace(e,r)}changeToDrawingView(){return this.engine.setCamera(this.camera),this}beginDraw(){return this.dispatchEvent({type:"begin"}),this.begun=!1,this.engine.pointerManager.addEventListener("mousedown",this.cacheBeginWriteFun),this}endDraw(e=!0){const t=this.engine.pointerManager;return t.removeEventListener("mousedown",this.cacheWriteFun),t.removeEventListener("pointermove",this.cacheMoveFun),this.dispatchEvent({type:"end"}),e&&(this.begun||this.engine.pointerManager.removeEventListener("mousedown",this.cacheBeginWriteFun),this.removeEvent("begin"),this.removeEvent("write"),this.removeEvent("move"),this.removeEvent("end")),this.begun=!1,this}}const u=s.transPkgName(m),g=function(){return{name:u,deps:[h.POINTER_MANAGER_PLUGIN],install(o){const l=new p(o);o.pathSketcher=l},dispose(o){o.pathSketcher.dispose(),delete o.pathSketcher}}};i.PATHSKETCHER_EVENT=d,i.PATH_DRAWING_PLUGIN=u,i.PathDrawingPlugin=g,i.PathSketcher=p,Object.defineProperties(i,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
