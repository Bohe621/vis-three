import"../modulepreload-polyfill.b7f2da20.js";import{l as B,m as V,M as E}from"../index.fae0c960.js";import{K as M,t as _,bv as b,M as x,af as G,am as W,h as u,aj as R,aw as L,a as z}from"../three.a7f96461.js";import{W as A,C as O}from"../index.071db2cc.js";import{R as k}from"../index.6ff295ff.js";import{E as K}from"../index.d73b554e.js";import{b as H}from"../index.453e5660.js";import{O as I}from"../index.4b35f5ef.js";import{K as T,a as D}from"../index.bfef716c.js";import{E as j}from"../index.a270601c.js";import{O as U}from"../index.1e646713.js";import{v as q}from"../index.8b9e7665.js";/* empty css               */import"../Antdv.35288747.js";const S=new u,v=new u,g=new M;new _;const i=new b;let w=!1;const r=new x(new G(.5,.5,1),new W({color:"red"})),d=new u;r.geometry.translate(0,-.5,0);const y={radius:.5,segment:new b(new u,new u(0,-1,0))},a=q({plugins:[k(),A({antialias:!0,alpha:!0}),K({WebGLMultisampleRenderTarget:!0}),O(),H({path:"/vis-three/examples/"}),I(),E({visualizer:!0,shapecast:{intersectsBounds:o=>o.intersectsBox(g),intersectsTriangle:o=>{const m=S,n=v,l=o.closestPointToSegment(i,m,n);if(l<y.radius){const t=y.radius-l,s=n.sub(m).normalize();i.start.addScaledVector(s,t),i.end.addScaledVector(s,t)}}}}),T({target:r,movementSpeed:50,quickenSpeed:50,space:"world",extendKeyDown:o=>{switch(o.code){case"Space":w&&(d.y=.5);break}},beforeUpdate:({delta:o})=>{d.y+=w?0:o*-1,r.position.add(d)}})],strategy:[j(),U(),D()]}).setDom(document.getElementById("app")).setSize();B(a);const C=()=>{d.y=0,r.position.set(155,0,300),a.camera.position.set(0,5,15),a.orbitControls.target.set(0,0,0)},P=new R("white",7);P.position.set(-5,5,10);a.scene.add(r,P);C();const F=new u;a.keyboardMoveControls.forwrad=o=>F.set(0,0,-1).applyAxisAngle(o.up,a.orbitControls.getAzimuthalAngle());a.keyboardMoveControls.addEventListener("afterUpdate",o=>{r.updateMatrixWorld();const m=a.camera,n=a.orbitControls;g.makeEmpty(),i.copy(y.segment),i.start.applyMatrix4(r.matrixWorld),i.end.applyMatrix4(r.matrixWorld),g.expandByPoint(i.start),g.expandByPoint(i.end),g.min.addScalar(-y.radius),g.max.addScalar(y.radius),a.meshBVHManager.shapecast();const l=S;l.copy(i.start);const t=v;t.subVectors(l,r.position),w=t.y>Math.abs(o.delta*d.y*.01);const s=Math.max(0,t.length());t.normalize().multiplyScalar(s),r.position.add(t),w?d.set(0,0,0):(t.normalize(),d.addScaledVector(t,-t.dot(d))),r.position.y<-100&&C(),m.position.sub(n.target),n.target.copy(r.position),m.position.add(r.position)});a.loadResourcesAsync(["/model/glb/dungeon_low_poly_game_level_challenge/scene.gltf"]).then(o=>{const n=o.resourceMap.get("/model/glb/dungeon_low_poly_game_level_challenge/scene.gltf").scene;n.scale.setScalar(.1);const l=new M;l.setFromObject(n),l.getCenter(n.position).negate(),n.updateMatrixWorld(!0);const t={};n.traverse(e=>{if(!(/Boss/.test(e.name)||/Enemie/.test(e.name)||/Shield/.test(e.name)||/Sword/.test(e.name)||/Character/.test(e.name)||/Gate/.test(e.name)||/Cube/.test(e.name)||e.material&&e.material.color.r===1)&&e.isMesh){const f=e.material.color.getHex();t[f]=t[f]||[],t[f].push(e)}});const s=new L;for(const e in t){const f=t[e],h=[];if(f.forEach(p=>{if(p.material.emissive.r!==0)s.attach(p);else{const c=p.geometry.clone();c.applyMatrix4(p.matrixWorld),h.push(c)}}),h.length){const p=V(h),c=new x(p,new z({color:parseInt(e),shadowSide:2}));c.castShadow=!0,c.receiveShadow=!0,c.material.shadowSide=2,s.add(c)}}s.updateMatrixWorld(!0),s.traverse(e=>{e.geometry&&a.addBVH(e)}),a.scene.add(s),a.play()});window.engine=a;
