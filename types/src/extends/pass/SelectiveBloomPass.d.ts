import { Camera, Object3D, Scene, ShaderMaterial, Vector2, WebGLRenderer, WebGLRenderTarget } from "three";
import { Pass } from "three/examples/jsm/postprocessing/Pass";
export declare class SelectiveBloomPass extends Pass {
    static BlurDirectionX: Vector2;
    static BlurDirectionY: Vector2;
    resolution: Vector2;
    strength: number;
    radius: number;
    threshold: number;
    selectedObjects: Object3D[];
    renderScene: Scene;
    renderCamera: Camera;
    private clearColor;
    private renderTargetsHorizontal;
    private renderTargetsVertical;
    private nMips;
    private selectRenderTarget;
    private renderTargetBright;
    private highPassUniforms;
    private materialHighPassFilter;
    private separableBlurMaterials;
    private compositeMaterial;
    private bloomTintColors;
    private mixMaterial;
    enabled: boolean;
    needsSwap: boolean;
    private _oldClearColor;
    private oldClearAlpha;
    private basic;
    private fsQuad;
    private materialCache;
    private sceneBackgroundCache;
    private overrideBackground;
    private overrideMeshMaterial;
    private overrideLineMaterial;
    private overridePointsMaterial;
    private overrideSpriteMaterial;
    constructor(resolution: Vector2 | undefined, strength: number | undefined, radius: number | undefined, threshold: number | undefined, renderScene: Scene | undefined, renderCamera: Camera | undefined, selectedObjects: Object3D[]);
    dispose(): void;
    setSize(width: number, height: number): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime: number, maskActive: boolean): void;
    getMixMaterial(): ShaderMaterial;
    getSeperableBlurMaterial(kernelRadius: number): ShaderMaterial;
    getCompositeMaterial(nMips: number): ShaderMaterial;
}
